import { Alert } from 'react-native';
import { logNetworkError } from './error-logger';
import { getCurrentBaseUrl } from './axios';

// Simple network test that works in APK builds
// export const testNetworkConnectivity = async (): Promise<void> => {
//   const results: string[] = [];
//   const BASE_URL = getCurrentBaseUrl();
//   
//   try {
//     // Test 1: Basic internet connectivity
//     try {
//       const response = await fetch('https://httpbin.org/ip', { 
//         method: 'GET'
//       });
//       if (response.ok) {
//         results.push('✅ Internet connectivity: OK');
//       } else {
//         results.push('❌ Internet connectivity: Failed');
//       }
//     } catch (error: any) {
//       results.push(`❌ Internet connectivity: ${error.message}`);
//       logNetworkError('Internet connectivity test failed', 'https://httpbin.org/ip', undefined, { error: error.message });
//     }
//
//     // Test 2: Backend connectivity
//     try {
//       const response = await fetch(`${BASE_URL}/health`, { 
//         method: 'GET',
//         headers: {
//           'Accept': 'application/json',
//           'Content-Type': 'application/json',
//         }
//       });
//       
//       if (response.ok) {
//         results.push('✅ Backend connectivity: OK');
//       } else {
//         results.push(`⚠️ Backend connectivity: HTTP ${response.status}`);
//         logNetworkError(`Backend returned HTTP ${response.status}`, `${BASE_URL}/health`, response.status);
//       }
//     } catch (error: any) {
//       results.push(`❌ Backend connectivity: ${error.message}`);
//       logNetworkError('Backend connectivity test failed', `${BASE_URL}/health`, undefined, { error: error.message });
//     }
//
//     // Test 3: CSRF token endpoint
//     try {
//       const response = await fetch(`${BASE_URL}/csrf-token`, { 
//         method: 'GET',
//         headers: {
//           'Accept': 'application/json',
//           'Content-Type': 'application/json',
//         }
//       });
//       
//       if (response.ok) {
//         results.push('✅ CSRF endpoint: OK');
//       } else {
//         results.push(`⚠️ CSRF endpoint: HTTP ${response.status}`);
//         logNetworkError(`CSRF endpoint returned HTTP ${response.status}`, `${BASE_URL}/csrf-token`, response.status);
//       }
//     } catch (error: any) {
//       results.push(`❌ CSRF endpoint: ${error.message}`);
//       logNetworkError('CSRF endpoint test failed', `${BASE_URL}/csrf-token`, undefined, { error: error.message });
//     }
//
//   } catch (error: any) {
//     results.push(`❌ Network test failed: ${error.message}`);
//     logNetworkError('Network test failed', undefined, undefined, { error: error.message });
//   }
//
//   // Show results to user
//   const resultText = results.join('\n');
//   Alert.alert(
//     'Network Test Results',
//     resultText,
//     [
//       { text: 'OK', style: 'default' },
//       { text: 'View Logs', onPress: () => {
//         // This will be handled by the error logger
//         import('./error-logger').then(({ showLogs }) => showLogs());
//       }}
//     ]
//   );
// };

// Test specific endpoint
// export const testEndpoint = async (url: string, method: string = 'GET'): Promise<void> => {
//   try {
//     const BASE_URL = getCurrentBaseUrl();
//     const fullUrl = url.startsWith('http') ? url : `${BASE_URL}${url.startsWith('/') ? url : '/' + url}`;
//     const response = await fetch(fullUrl, { 
//       method,
//       headers: {
//         'Accept': 'application/json',
//         'Content-Type': 'application/json',
//       }
//     });
//     
//     if (response.ok) {
//       Alert.alert('Success', `${method} ${fullUrl}\nStatus: ${response.status}`);
//     } else {
//       Alert.alert('Error', `${method} ${fullUrl}\nStatus: ${response.status}\n${response.statusText}`);
//       logNetworkError(`Endpoint test failed: ${response.status}`, fullUrl, response.status);
//     }
//   } catch (error: any) {
//     Alert.alert('Error', `${method} ${url}\nError: ${error.message}`);
//     logNetworkError(`Endpoint test failed: ${error.message}`, url, undefined, { error: error.message });
//   }
// }; 