import React, { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Device from 'expo-device';
import { v4 as uuidv4 } from 'uuid';
import axiosInstance, { fetchCsrfToken, getCurrentBaseUrl } from '../lib/axios';
import { WalletService } from '../services/wallet';
import { getOrCreateDeviceId } from '../lib/deviceid';
import { Platform } from 'react-native';

// Use centralized BASE_URL
const BASE_URL = getCurrentBaseUrl();

// Create a plain axios instance for auth requests (no interceptors, but same BASE_URL)
const plainAxios = require('axios').create({
  baseURL: BASE_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

console.log('plainAxios created for auth requests');

type RegistrationResult = {
  success: boolean;
  deviceId?: string;
  errors?: string[];
};

type AuthContextType = {
  isAuthenticated: boolean;
  isLoading: boolean;
  needsMnemonicSetup: boolean;
  login: (deviceId: string, password: string) => Promise<void>;
  register: (deviceId: string, password: string, confirmPassword?: string) => Promise<RegistrationResult | undefined>;
  logout: () => Promise<void>;
  completeMnemonicSetup: (verifiedMnemonic?: string) => void;
  token: string | null;
  deviceId: string | null;
  // login
  loginPassword: string;
  setLoginPassword: (password: string) => void;
  loginCurrentStep: number;
  setLoginCurrentStep: (step: number) => void;
  // register
  registerPassword: string;
  setRegisterPassword: (password: string) => void;
  registerConfirmPassword: string;
  setRegisterConfirmPassword: (confirmPassword: string) => void;
  registerCurrentStep: number;
  setRegisterCurrentStep: (step: number) => void;
  setOnRegistrationComplete: (callback: (() => void) | undefined) => void;
};

const AuthContext = createContext<AuthContextType | undefined>(undefined);

function AuthProvider({ children }: { children: React.ReactNode }) {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [needsMnemonicSetup, setNeedsMnemonicSetup] = useState(false);
  const [token, setToken] = useState<string | null>(null);
  const [deviceId, setDeviceId] = useState<string | null>(null);
  const [loginPassword, setLoginPassword] = useState('');
  const [loginCurrentStep, setLoginCurrentStep] = useState(1);
  const [registerPassword, setRegisterPassword] = useState('');
  const [registerConfirmPassword, setRegisterConfirmPassword] = useState('');
  const [registerCurrentStep, setRegisterCurrentStep] = useState(1);
  const onRegistrationCompleteRef = useRef<(() => void) | undefined>(undefined);

  const setOnRegistrationComplete = useCallback((callback: (() => void) | undefined) => {
    onRegistrationCompleteRef.current = callback;
  }, []);

  const initializeAuth = useCallback(async () => {
    try {
      // Check auth status first
      const storedToken = await AsyncStorage.getItem('auth_token');
      if (storedToken) {
        setToken(storedToken);
        setIsAuthenticated(true);
      }

      // Always use the new device ID utility
      const realDeviceId = await getOrCreateDeviceId();
      setDeviceId(realDeviceId);
      // Double check after set
      const checkDeviceId = await AsyncStorage.getItem('deviceid');
      console.log('Auth init: deviceId in AsyncStorage after set:', checkDeviceId);
    } catch (error) {
      console.error('Error initializing auth:', error);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => {
    initializeAuth();
  }, [initializeAuth]);

  const login = useCallback(async (deviceId: string, password: string) => {
    let csrfToken = await fetchCsrfToken();
    if (!csrfToken) throw new Error('Failed to fetch CSRF token');
    let attempt = 0;
    while (attempt < 2) {
      try {
        const response = await plainAxios.post('/auth/login', { deviceid: deviceId, password }, {
          headers: { 'X-CSRF-Token': csrfToken },
          withCredentials: true
        });
        const data = response.data;
        const token = data.token || data.accessToken || data.jwt || data.data?.token;
        const refreshToken = data.refreshToken;
        const newDeviceId = data.user?.deviceid || data.user?.dataValues?.deviceid;
        if (!token) throw new Error('No token returned');
        if (!newDeviceId) throw new Error('No device ID returned');
        await AsyncStorage.setItem('auth_token', token);
        if (refreshToken) await AsyncStorage.setItem('refresh_token', refreshToken);
        await AsyncStorage.setItem('deviceid', newDeviceId);
        setToken(token);
        setDeviceId(newDeviceId);
        setIsAuthenticated(true);
        return;
      } catch (error: any) {
        if ((error.response?.status === 403 || error.response?.status === 419) && attempt === 0) {
          csrfToken = await fetchCsrfToken();
          attempt++;
          continue;
        }
        const message = error.response?.data?.message || error.message || 'Login failed';
        alert(message);
        throw error;
      }
    }
  }, []);

  const register = useCallback(async (deviceId: string, password: string, confirmPassword?: string): Promise<RegistrationResult | undefined> => {
    try {
      console.log('=== REGISTER ATTEMPT ===');
      console.log('Device ID:', deviceId);
      
      let csrfToken = await fetchCsrfToken();
      if (!csrfToken) {
        console.warn('Failed to fetch CSRF token, but continuing with registration...');
        // Continue without CSRF token for now
      }
      
      let attempt = 0;
      while (attempt < 2) {
        try {
          const requestData = { deviceid: deviceId, password, confirmPassword };
          const headers: any = { 'Content-Type': 'application/json' };
          if (csrfToken) {
            headers['X-CSRF-Token'] = csrfToken;
          }
          
          const response = await plainAxios.post('/auth/register', requestData, {
            headers,
            withCredentials: true,
            timeout: 15000
          });
          
          const data = response.data;
          const newDeviceId = data.deviceid || data.user?.deviceid;
          if (!newDeviceId) throw new Error('No device ID returned');
          
          await AsyncStorage.setItem('deviceid', newDeviceId);
          setDeviceId(newDeviceId);
          await AsyncStorage.setItem('temp_password', password);
          setNeedsMnemonicSetup(true);
          if (onRegistrationCompleteRef.current) onRegistrationCompleteRef.current();
          return { success: true, deviceId: newDeviceId };
        } catch (error: any) {
          if ((error.response?.status === 403 || error.response?.status === 419) && attempt === 0) {
            console.log('CSRF error, retrying with fresh token...');
            csrfToken = await fetchCsrfToken();
            attempt++;
            continue;
          }
          if (error.response?.data?.details && Array.isArray(error.response.data.details)) {
            throw error.response.data.details.map((d: any) => d.message);
          }
          const message = error.response?.data?.message || error.message || 'Registration failed';
          throw [message];
        }
      }
    } catch (error: any) {
      console.error('=== REGISTER ERROR ===');
      console.error('Registration failed:', error);
      throw error;
    }
  }, []);

  const logout = useCallback(async () => {
    try {
      await AsyncStorage.removeItem('auth_token');
      await AsyncStorage.removeItem('refresh_token');
      await AsyncStorage.removeItem('csrf_token');
      await AsyncStorage.removeItem('deviceid');
      setToken(null);
      setDeviceId(null);
      setIsAuthenticated(false);
    } catch (error) {
      console.error('Logout failed:', error);
      throw error;
    }
  }, []);

  const completeMnemonicSetup = useCallback(async (verifiedMnemonic?: string) => {
    try {
      // Get the stored device ID and password for auto-login
      const storedDeviceId = await AsyncStorage.getItem('deviceid');
      const storedPassword = await AsyncStorage.getItem('temp_password'); // We'll need to store this temporarily
      
      if (!storedDeviceId || !storedPassword) {
        throw new Error('Missing device ID or password for auto-login');
      }
      
      // Auto-login after mnemonic setup is complete
      console.log('Auto-login after mnemonic setup...');
      const loginResponse = await plainAxios.post('/auth/login', { 
        deviceid: storedDeviceId, 
        password: storedPassword 
      });
      console.log('Auto-login response:', loginResponse.data);
      
      const loginData = loginResponse.data;
      const token = loginData.token || loginData.accessToken || loginData.jwt || loginData.data?.token;
      const refreshToken = loginData.refreshToken;
      
      if (!token) throw new Error('No token returned from auto-login');
      
      await AsyncStorage.setItem('auth_token', token);
      if (refreshToken) {
        await AsyncStorage.setItem('refresh_token', refreshToken);
      }
      
      // Clear temporary password
      await AsyncStorage.removeItem('temp_password');
      
      setToken(token);
      setIsAuthenticated(true);
      setNeedsMnemonicSetup(false);
      
      console.log('Mnemonic setup completed - user authenticated');
      
      // Create all wallets for the user using the verified mnemonic
      console.log('Creating all wallets for the user using verified mnemonic...');
      try {
        // Use the passed mnemonic or get from global storage as fallback
        const mnemonicToUse = verifiedMnemonic || (global as any).mnemonicForVerification;
        if (mnemonicToUse) {
          console.log('Using verified mnemonic to create wallets...');
          const walletResult = await WalletService.createAllWalletsFromMnemonic(mnemonicToUse);
          if (walletResult.success) {
            console.log('All wallets created successfully from verified mnemonic');
            // Clear the mnemonic from global storage
            (global as any).mnemonicForVerification = null;
            // Set flag to indicate just registered so wallets will be refreshed
            await AsyncStorage.setItem('just_registered', 'true');
          } else {
            console.error('Failed to create wallets from mnemonic:', walletResult.error);
            // Don't throw error here as user is already authenticated
          }
        } else {
          console.warn('No verified mnemonic found, creating wallets with new mnemonic...');
          // Fallback to creating wallets with new mnemonic
          const walletResult = await WalletService.createAllWallets();
          if (walletResult.success) {
            console.log('All wallets created successfully with new mnemonic');
            // Set flag to indicate just registered so wallets will be refreshed
            await AsyncStorage.setItem('just_registered', 'true');
          } else {
            console.error('Failed to create wallets:', walletResult.error);
            // Don't throw error here as user is already authenticated
          }
        }
      } catch (walletError) {
        console.error('Error creating wallets:', walletError);
        // Don't throw error here as user is already authenticated
      }
    } catch (error: any) {
      console.error('Failed to complete mnemonic setup:', error);
      throw error;
    }
  }, []);

  if (isLoading) {
    return null; // or a loading screen
  }

  return (
    <AuthContext.Provider value={{
      isAuthenticated,
      isLoading,
      needsMnemonicSetup,
      login,
      register,
      logout,
      completeMnemonicSetup,
      token,
      deviceId,
      loginPassword,
      setLoginPassword,
      loginCurrentStep,
      setLoginCurrentStep,
      registerPassword,
      setRegisterPassword,
      registerConfirmPassword,
      setRegisterConfirmPassword,
      registerCurrentStep,
      setRegisterCurrentStep,
      setOnRegistrationComplete
    }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

export default AuthProvider;